from dataclasses import dataclass, field
from enum import IntEnum


class Space(IntEnum):
    MOTOR = 1
    LOAD = 2


@dataclass
class SpaceData:
    """
    Data structure for storing state and dynamic information for a specific space (motor or load) in the twisted string actuator system.

    Attributes:
        position (float): Position of the space. Defaults to 0.0.
        velocity (float): Velocity of the space. Defaults to 0.0.
        acceleration (float): Acceleration of the space. Defaults to 0.0.
        jacobian (float): Jacobian element for the space. Defaults to 0.0.
        djacobian (float): Time derivative of the Jacobian for the space. Defaults to 0.0.
        force (float): Force applied to or generated by the space. Defaults to 0.0.
        coriolis (float): Coriolis term for the space. Defaults to 0.0.
        inertia (float): Inertia term for the space. Defaults to 0.0.
        nonlinear (float): Nonlinear term for the space. Defaults to 0.0.
        static (float): Static term for the space. Defaults to 0.0.
        jamming (float): Jamming effect term for the space. Defaults to 0.0.
    """

    position: float = 0.0
    velocity: float = 0.0
    acceleration: float = 0.0
    jacobian: float = 0.0
    djacobian: float = 0.0
    force: float = 0.0
    coriolis: float = 0.0
    inertia: float = 0.0
    nonlinear: float = 0.0
    static: float = 0.0
    jamming: float = 0.0


@dataclass
class Data:
    """
    Data structure for storing state and dynamic information for both motor and load spaces in the twisted string actuator system.

    Attributes:
        motor (SpaceData): Data for the motor space.
        load (SpaceData): Data for the load space.
    """

    motor: SpaceData = field(default_factory=SpaceData)
    load: SpaceData = field(default_factory=SpaceData)


# TODO: Should we mark space with ENUM value?
# Maybe it will be easier to separate kinematics and dynamics in data?
